<html>
  <head>
    <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-EVSTQN3/azprG1Anm3QDgpJLIm9Nao0Yz1ztcQTwFspd3yD65VohhpuuCOmLASjC" crossorigin="anonymous">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.5.0/font/bootstrap-icons.css">
    <style>
      .container-fluid {
        padding-left: 2rem;
        padding-right: 2rem;
      }
      .remove-helper {
        float: right;
        margin-right: 5px;
        margin-top: 5px;
      }
      .sum-helper {
        margin-bottom: .75em;
        margin-right: .75em;
        padding: 0;
        height: max-content;
        background-color: lightgrey;
      }
      .sum-helper-wrapper {
        padding: 5px;
      }
      #sum-form .row {
        margin-bottom: 10px;
      }
      .removed {
        color: #999 !important;
      }
      i {
        color: black;
        cursor: pointer;
      }
      .combo-total {
        font-weight:  bold;
      }
      .remove-icon {
        text-align:  right;
      }
      .hidetotal {
        display: none;
      }
      .tooltip-inner {
        background-color: #f00;
      }
      .tooltip.bs-tooltip-right .arrow:before {
          border-right-color: #f00 !important;
      }
      .tooltip.bs-tooltip-left .arrow:before {
          border-right-color: #f00 !important;
      }
      .tooltip.bs-tooltip-bottom .arrow:before {
          border-right-color: #f00 !important;
      }
      .tooltip.bs-tooltip-top .arrow:before {
          border-right-color: #f00 !important;
      }
      .bs-tooltip-auto[data-popper-placement^=bottom] .tooltip-arrow::before, .bs-tooltip-bottom .tooltip-arrow::before {
        border-bottom-color: #f00 !important;
      }
      #sum-form > div > div  {
        text-align: right;
      }
      .hidden {
        color: #666;
        background-color: #666;
      }
      .hidden-field {
        width: 7rem;
        display: inline-block;
      }
      .hidden-field-label {
        width: 5rem;
        display: inline-block;
      }
    </style>
    <script src="https://code.jquery.com/jquery-3.6.0.min.js" integrity="sha256-/xUj+3OJU5yExlq6GSYGSHk7tPXikynS7ogEvDej/m4=" crossorigin="anonymous"></script>
    <script src="lib/combinations.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/vue@2.6.14"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.0/dist/js/bootstrap.bundle.min.js"></script>
  </head>
  <body>
    <div id="app" class="container-fluid">
      <h1>Unique Sum Helpers</h1>
      <div class="row me-0 ms-0 ps-0 pe-0">
        <sum-helper-form></sum-helper-form>
      </div>
      <div class="row">
        <sum-helper
          v-for="helper in sumHelpers"
          v-bind:key="helper.id"
          v-bind:helper="helper"
        ></sum-helper>
      </div>
    </div>
    <div id="data-bucket" data-combos=""></div>
    <script>
     Vue.component('sum-helper-form', {
        data: function() {
          return {
            size: "0",
            total: "0",
            included: "",
            excluded: ''
          }
        },
        computed: {
          isButtonDisabled: function(){
            return ( this.size == 0 && this.total == 0 )
          }
        },
        methods: {
          addHelper: function(){
            this.size = this.cleanZeros(this.size)
            this.total = this.cleanZeros(this.total)
            this.cleanIncludedExcluded()
            if ( this.invalidOptions() ){
              this.toggleTooltip();
              setTimeout(this.toggleTooltip, 3000)
              return
            }
            this.$parent.addHelper(this.size,this.total,this.included,this.excluded)
          },
          updateHelper: function(){
            this.size = this.cleanZeros(this.size)
            this.total = this.cleanZeros(this.total)
            this.cleanIncludedExcluded()
            this.$parent.updateHelper(this.size,this.total,this.included,this.excluded)
          },
          resetTotal: function(){
            this.total = "0"
          },
          toggleTooltip: function(){
            $('#add-helper-button').tooltip('toggle')
          },
          cleanZeros: function(s) {
            while ( s[0] == 0 ){
              s = s.slice(1)
            }
            return s
          },
          cleanIncludedExcluded: function() {
            let digits = this.included.split("")
            this.included = digits.filter((digit) => digit.match(/[1-9]/)).join("")
            this.included = this.included.split('').filter((v, i, a) => a.indexOf(v) === i).sort().join('')
            digits = this.excluded.split('')
            this.excluded = digits.filter((digits) => digits.match(/[1-9]/)).join('')
            this.excluded = this.excluded.split('').filter((v, i, a) => a.indexOf(v) === i).sort().join('')
          },
          invalidOptions: function(){
            let combos = this.$parent.getCombos(this.size,this.total,this.included,this.excluded)
            return combos == undefined || combos.length < 1
          }
        },
        template: `
          <div id="sum-form" class="row me-0 ms-0 ps-0 pe-0">
            <div class="form-group row col-12 col-md-6 me-0 ms-0 ps-0 pe-0 mb-0">
              <div class="form-group row me-0 ms-0 ps-0 pe-0">
                <div class="col-3"><label for="size" class="col-form-label">Size</label></div>
                <div class="col-9">
                  <input v-model="size" class="form-control" id="size" v-on:input="updateHelper" type="number">
                </div>
              </div>
              <div class="row form-group me-0 ms-0 ps-0 pe-0">
                <div class="col-3"><label for="total" class="col-form-label">Total</label></div>
                <div class="col-9">
                  <input v-model="total" id="total" class="form-control col-1" type="number" v-on:click="(e) => e.target.select()" v-on:input="updateHelper"/>
                </div>
              </div>
              <div class="row form-group me-0 ms-0 ps-0 pe-0">
                <div class="col-3"><label for="included" class="col-form-label">Included</label></div>
                <div class="col-9">
                  <input type="number" id="included" v-model="included" class="form-control" v-on:click="(e) => e.target.select()" placeholder="Any format" v-on:input="updateHelper">
                </div>
              </div>
              <div class="row form-group me-0 ms-0 ps-0 pe-0">
                <div class="col-3"><label for="excluded" class="col-form-label">Excluded</label></div>
                <div class="col-9">
                  <input type="text" id="excluded" v-model="excluded" class="form-control" v-on:click="(e) => e.target.select()" placeholder="Any format" v-on:input="updateHelper">
                </div>
              </div>
              <div class="row me-0 ms-0 ps-0 pe-0 mb-0 pb-0">
                <div class="col-lg-9 offset-lg-3">
                  <div class="row me-0 ms-0">
                    <button id="add-helper-button" v-on:click="addHelper" class="btn btn-primary red-tooltip col-12" data-toggle="tooltip" data-placement="bottom" title="Illegal combination of options.">Add Helper</button>
                  </div>
                </div>
              </div>
            </div>
            <div class="col-12 col-lg-6">You may enter 0 (meaning undefined value) for either size or total or both. Included and excluded are very forgiving, as they drop all non-numeric characters and impose uniqueness.</div>
            </div>
          </div>

        `
      })

      Vue.component('combo-row', {
        props: ['combo','total','included'],
        data: function() {
          return { removed: false }
        },
        computed: {
          plusOrMinus: function() {
            return {
              "bi-dash-circle": !this.removed,
              "bi-plus-circle": this.removed
            }
          },
          hideTotal: function(){
            return this.total != 0
          }
        },
        methods: {
          toggleRemoved: function(e){
            this.$parent.toggleCombo($(e.target).data('combo'))
            this.removed = !this.removed
          },
        },
        template: `
          <tr class="" v-bind:class="{removed: removed}">
            <td class="col-2" v-bind:class="{hidetotal: hideTotal}"><span class="combo-total">{{this.$parent.$parent.sumOfDigits(combo)}}</span></td>
            <td class="col"><span class="combo">{{combo}}</span></td>
            <td class="col-1 remove-icon"><i v-on:click="toggleRemoved" :data-combo="combo" class="bi" v-bind:class="plusOrMinus"></i></td>
          </tr>
      `
      })

      Vue.component('sum-helper', {
        props: ['helper'],
        data: function() {
          return {
            hideMissingField: true,
            hideRequiredField: true,
            componentKey: 0
          }
        },
        computed: {
          possibilities: function() { return this.helper.activeCombos.length },
          required: function() {
            if ( this.helper.activeCombos.length == 0 ){
              return []
            }
            let r = []
            var longest = this.helper.activeCombos.reduce(
                function (a, b) {
                    return a.length > b.length ? a : b;
                }
            );
            for (let x=0; x < longest.length; x++){
              let notFound = false
              for (let y=0; y < this.helper.activeCombos.length; y++){
                if ( this.helper.activeCombos[y].indexOf(longest[x]) < 0 ){
                  notFound = true
                  break
                }
              }
              if (!notFound) {
                r.push(longest[x])
              }
            }
            return r
          },
          missing: function() {
            if (this.helper.activeCombos.length == 0){
              return [1,2,3,4,5,6,7,8,9]
            }
            let missing = []
            for (let x=1;x < 10; x++){
              const found = this.helper.activeCombos.some(combo => String(combo).includes(x));
              if ( !found ){
                missing.push(x)
              }
            }
            return missing
          },
          missingEye: function(){
            return {
              "bi-eye": this.hideMissingField,
              "bi-eye-slash": !this.hideMissingField
            }
          },
          requiredEye: function(){
            return {
              "bi-eye": this.hideRequiredField,
              "bi-eye-slash": !this.hideRequiredField
            }
          }
        },
        methods: {
          removeHelper: function(){
            this.$parent.removeHelper(this.helper.id)
          },
          toggleCombo: function(combo){
            combo = "" + combo
            let index = this.helper.activeCombos.indexOf(combo)
            if ( index > -1 ){
              this.helper.activeCombos.splice(index,1)
            } else {
              this.helper.activeCombos.push(combo)
            }
          },
          showSize: function(){
            if (this.helper.size != 0){
              return {display: 'block'}
            } else {
              return { display: 'none'}
            }
          },
          showTotal: function(){
            if (this.helper.total != 0){
              return {display: 'block'}
            } else {
              return { display: 'none'}
            }
          },
          showIncluded: function(){
            if (this.helper.included.length == 0)
              return {display: 'none'}
            return {display: 'block'}
          },
          showExcluded: function() {
            if (this.helper.excluded.length == 0)
              return {display: 'none'}
            return {display: 'block'}
          },
          showMissing: function() {
            if (this.missing.length == 0)
              return {display: 'none'}
            return {display: 'block'}
          },
          showRequired: function() {
            if (this.required.length == 0)
              return {display: 'none'}
            return {display: 'block'}
          },
          toggleMissing: function(){
            this.hideMissingField = !this.hideMissingField
          },
          toggleRequired: function(){
            this.hideRequiredField = !this.hideRequiredField
          },
          forceRerender() {
            this.componentKey += 1;
          }
        },
        template: `
          <div class="sum-helper col-12 col-md-4 col-lg-3" :id="helper.id" :key="componentKey">
            <i v-on:click="removeHelper" class="bi bi-x-square remove-helper"></i>
            <div class="sum-helper-wrapper">
              <div v-bind:style="this.showSize()"">Size: {{helper.size}}</div>
              <div v-bind:style="this.showTotal()">Total: {{helper.total}}</div>
              <div v-bind:style="this.showIncluded()">Included: {{helper.included.join(',')}}</div>
              <div v-bind:style="this.showExcluded()">Excluded: {{helper.excluded.join(',')}}</div>
              <div v-bind:style="this.showMissing()">
                <span class="hidden-field-label">Missing:</span> <span v-bind:class="{hidden: hideMissingField}" class="hidden-field">{{missing.join(',')}}</span>
                <i v-on:click="toggleMissing" class="bi" v-bind:class="missingEye"></i>
              </div>
              <div v-bind:style="this.showRequired()">
                <span class="hidden-field-label">Required:</span> <span v-bind:class="{hidden: hideRequiredField}" class="hidden-field">{{required.join(',')}}</span>
                <i v-on:click="toggleRequired" class="bi" v-bind:class="requiredEye"></i>
              </div>
              <div>Possibilities: {{possibilities}}</div>
            </div>
            <table class="table table-striped">
              <tbody>
                <combo-row v-for="combo in this.helper.combos" v-bind:combo="combo" v-bind:total="helper.total" v-bind:key="helper.id + '-' + combo"></combo-row>
              </tbody>
            </table>
            <textarea v-model="helper.notes" class="form-control"></textarea>
            </div>
          </div>
        `
      })

      var app = new Vue({
        el: '#app',
        methods: {
          getNextHelperId: function() {
            return 'helper-' + ++(this.count)
          },
          addHelper: function(size,total,included,excluded){
            this.sumHelpers.push({
              id: this.getNextHelperId(),
              size: size,
              total: total,
              included: included.split(''),
              excluded: excluded.split(''),
              notes: '',
              combos: [...this.getCombos(size,total,included,excluded)],
              activeCombos: [...this.getCombos(size,total,included,excluded)]
            })
          },
          updateHelper: function(size,total,included,excluded){

            if ( this.sumHelpers.length == 0 ){
              this.addHelper(size,total,included,excluded)
              return
            }

            let helper = this.sumHelpers[this.sumHelpers.length -1]
            let componentHelper = this.$children[this.$children.length -1].helper
            helper.size = size
            componentHelper.size = size
            helper.total = total
            componentHelper.total = total
            helper.included = included.split('')
            componentHelper.included = included.split('')
            helper.excluded = excluded.split('')
            componentHelper.excluded = excluded.split('')
            helper.combos = [...this.getCombos(size,total,included,excluded)]
            componentHelper.combos = [...this.getCombos(size,total,included,excluded)]
            helper.activeCombos = [...this.getCombos(size,total,included,excluded)]
            componentHelper.activeCombos = [...this.getCombos(size,total,included,excluded)]
          },
          removeHelper: function(id) {
            this.sumHelpers.splice(this.sumHelpers.findIndex(helper => helper.id == id),1)
          },
          sumOfDigits: function(s){
            let sum = 0;
            for ( let x=0; x < s.length; x++ ){
              sum += parseInt(s[x]);
            }
            return sum;
          },
          getCombos: function(size,total,included,excluded) {
            if ( included == "" && excluded == '' ){
              if ( size == 0 && total == 0 ){
                return this.allCombinations
              }
              if ( size == 0 ){
                return this.totalCombinations(total)
              }
              if ( total == 0 ){
                return this.combosForSize(size)
              }
              return this.combos[size][total] || []
            }
            return this.filterTotalCombos(size,total,included,excluded)
          },
          filterTotalCombos: function(size,total,included,excluded){
            let a = []
            if ( total == 0 && size == 0 ) {
              a = this.allCombinations
            } else {
              if ( total == 0 ){
                a = this.combosForSize(size)
              } else {
                a = this.totalCombinations(total)
              }
            }
            a = a.filter(e => {
              if ( size > 0 && e.length != size ){
                return false
              }
              let includedFlag = true
              for (let x=0; x < included.length; x++ ) {
                if ( e.indexOf(included[x]) > -1 ) {
                  includedFlag = (includedFlag && true)
                } else {
                  includedFlag = false
                }
              }
              let excludedFlag = true
              for (let x=0; x < excluded.length; x++ ) {
                if ( e.indexOf(excluded[x]) > -1 ) {
                  excludedFlag = false
                } else {
                  excludedFlag = excludedFlag && true
                }
              }
              return includedFlag && excludedFlag
            })
            if (total != 0){
              return a.sort(this.sortTotalCombos);
            }
            return a.sort(this.sortSizeCombos)
          },
          includedInIncludedString: function(s,included) {
            for ( let x=0;x < included.length; x++){
              if ( s.indexOf(included[x]) > -1 ){
                return true;
              }
            }
            return false;
          },
          combosForSize: function(size){
            return k_combinations([1,2,3,4,5,6,7,8,9],size).map(function(e){return e.join('')}).sort(this.sortSizeCombos)
          },
          unique_combinations_for_total: function(l, sum, K, local, A) {
            //based on code by _saurabh_jaiswal at https://www.geeksforgeeks.org/all-unique-combinations-whose-sum-equals-to-k/
            if (sum == K) {
              let current = $('#data-bucket').data('combos')
              if ( current != '' ){
                current += '|'
              }
              current += local.join('')
              $('#data-bucket').data('combos', current)
            }

            for (let i = l; i < A.length; i++) {
              if (sum + A[i] > K)
                  continue;
              if (i > l && A[i] == A[i - 1])
                  continue;

              local.push(A[i]);
              this.unique_combinations_for_total(i + 1, sum + A[i], K, local, A);
              local.pop();
            }
          },
          totalCombinations: function(K) {
            let local = [];
            this.unique_combinations_for_total(0, 0, K, local, [1,2,3,4,5,6,7,8,9]);
            let combos = $('#data-bucket').data('combos').split('|').sort(this.sortTotalCombos)
            $('#data-bucket').data('combos','')
            return combos
          },
          sortTotalCombos: function(a,b){
            if ( a.length < b.length ){
              return -1
            }
            if ( parseInt(a) < parseInt(b) ){
              return -1
            } else {
              return 1
            }
          },
          sortSizeCombos: function(a,b){
            let aSum = this.sumOfDigits(a)
            let bSum = this.sumOfDigits(b)
            if ( aSum < bSum ) {
              return -1
            } else if ( aSum == bSum) {
              if ( a < b ){
                return -1
              }
            }
            return 1
          }
        },
        data: {
          count: 0,
          sumHelpers: [],
          console: window.console,
          allCombinations: combinations([1,2,3,4,5,6,7,8,9]).map(e => e.join('')),
          combos: {
            "0": {},
            "2": {
              "3": [ "12" ],
              "4": [ "13" ],
              "5": [ "14", "23" ],
              "6": [ "15", "24" ],
              "7": [ "16", "25", "34" ],
              "8": [ "17", "26", "35" ],
              "9": [ "18", "27", "36", "45" ],
              "10": [ "19", "28", "37", "46" ],
              "11": [ "29", "38", "47", "56" ],
              "12": [ "39", "48", "57" ],
              "13": [ "49", "58", "67" ],
              "14": [ "59", "68" ],
              "15": [ "69", "78" ],
              "16": [ "79" ],
              "17": [ "89" ]
            },
            "3": {
              "6": [ "123" ],
              "7": [ "124" ],
              "8": [ "125", "134" ],
              "9": [ "126", "135", "234" ],
              "10": [ "127", "136", "145", "235" ],
              "11": [ "128", "137", "146", "236", "245" ],
              "12": [ "129", "138", "147", "156", "237", "246", "345" ],
              "13": [ "139", "148", "157", "238", "247", "256", "346" ],
              "14": [ "149", "158", "167", "239", "248", "257", "347", "356" ],
              "15": [ "159", "168", "249", "258", "267", "348", "357", "456" ],
              "16": [ "169", "178", "259", "268", "349", "358", "367", "457" ],
              "17": [ "179", "269", "278", "359", "368", "458", "467" ],
              "18": [ "189", "279", "369", "378", "459", "468", "567" ],
              "19": [ "289", "379", "469", "478", "568" ],
              "20": [ "389", "479", "569", "578" ],
              "21": [ "489", "579", "678" ],
              "22": [ "589", "679" ],
              "23": [ "689" ],
              "24": [ "789" ]
            },
            "4": {
              "10": [ "1234" ],
              "11": [ "1235" ],
              "12": [ "1236", "1245" ],
              "13": [ "1237", "1246", "1345" ],
              "14": [ "1238", "1247", "1256", "1346", "2345" ],
              "15": [ "1239", "1248", "1257", "1347", "1356", "2346" ],
              "16": [ "1249", "1258", "1267", "1348", "1357", "1456", "2347", "2356" ],
              "17": [ "1259", "1268", "1349", "1358", "1367", "1457", "2348", "2357", "2456" ],
              "18": [ "1269", "1278", "1359", "1368", "1458", "1467", "2349", "2358", "2367", "2457", "3456" ],
              "19": [ "1279", "1369", "1378", "1459", "1468", "1567", "2359", "2368", "2458", "2467", "3457" ],
              "20": [ "1289", "1379", "1469", "1478", "1568", "2369", "2378", "2459", "2468", "2567", "3458", "3467" ],
              "21": [ "1389", "1479", "1569", "1578", "2379", "2469", "2478", "2568", "3459", "3468", "3567" ],
              "22": [ "1489", "1579", "1678", "2389", "2479", "2569", "2578", "3469", "3478", "3568", "4567" ],
              "23": [ "1589", "1679", "2489", "2579", "2678", "3479", "3569", "3578", "4568" ],
              "24": [ "1689", "2589", "2679", "3489", "3579", "3678", "4569", "4578" ],
              "25": [ "1789", "2689", "3589", "3679", "4579", "4678" ],
              "26": [ "2789", "3689", "4589", "4679", "5678" ],
              "27": [ "3789", "4689", "5679" ],
              "28": [ "4789", "5689" ],
              "29": [ "5789" ],
              "30": [ "6789" ]
            },
            "5": {
              "15": [ "12345" ],
              "16": [ "12346" ],
              "17": [ "12347", "12356" ],
              "18": [ "12348", "12357", "12456" ],
              "19": [ "12349", "12358", "12367", "12457", "13456" ],
              "20": [ "12359", "12368", "12458", "12467", "13457", "23456" ],
              "21": [ "12369", "12378", "12459", "12468", "12567", "13458", "13467", "23457" ],
              "22": [ "12379", "12469", "12478", "12568", "13459", "13468", "13567", "23458", "23467" ],
              "23": [ "12389", "12479", "12569", "12578", "13469", "13478", "13568", "14567", "23459", "23468", "23567" ],
              "24": [ "12489", "12579", "12678", "13479", "13569", "13578", "14568", "23469", "23478", "23568", "24567" ],
              "25": [ "12589", "12679", "13489", "13579", "13678", "14569", "14578", "23479", "23569", "23578", "24568", "34567" ],
              "26": [ "12689", "13589", "13679", "14579", "14678", "23489", "23579", "23678", "24569", "24578", "34568" ],
              "27": [ "12789", "13689", "14589", "14679", "15678", "23589", "23679", "24579", "24678", "34569", "34578" ],
              "28": [ "13789", "14689", "15679", "23689", "24589", "24679", "25678", "34579", "34678" ],
              "29": [ "14789", "15689", "23789", "24689", "25679", "34589", "34679", "35678" ],
              "30": [ "15789", "24789", "25689", "34689", "35679", "45678" ],
              "31": [ "16789", "25789", "34789", "35689", "45679" ],
              "32": [ "26789", "35789", "45689" ],
              "33": [ "36789", "45789" ],
              "34": [ "46789" ],
              "35": [ "56789" ]
            },
            "6": {
              "21": [ "123456" ],
              "22": [ "123457" ],
              "23": [ "123458", "123467" ],
              "24": [ "123459", "123468", "123567" ],
              "25": [ "123469", "123478", "123568", "124567" ],
              "26": [ "123479", "123569", "123578", "124568", "134567" ],
              "27": [ "123489", "123579", "123678", "124569", "124578", "134568", "234567" ],
              "28": [ "123589", "123679", "124579", "124678", "134569", "134578", "234568" ],
              "29": [ "123689", "124589", "124679", "125678", "134579", "134678", "234569", "234578" ],
              "30": [ "123789", "124689", "125679", "134589", "134679", "135678", "234579", "234678" ],
              "31": [ "124789", "125689", "134689", "135679", "145678", "234589", "234679", "235678" ],
              "32": [ "125789", "134789", "135689", "145679", "234689", "235679", "245678" ],
              "33": [ "126789", "135789", "145689", "234789", "235689", "245679", "345678" ],
              "34": [ "136789", "145789", "235789", "245689", "345679" ],
              "35": [ "146789", "236789", "245789", "345689" ],
              "36": [ "156789", "246789", "345789" ],
              "37": [ "256789", "346789" ],
              "38": [ "356789" ],
              "39": [ "456789" ]
            },
            "7": {
              "28": [ "1234567" ],
              "29": [ "1234568" ],
              "30": [ "1234569", "1234578" ],
              "31": [ "1234579", "1234678" ],
              "32": [ "1234589", "1234679", "1235678" ],
              "33": [ "1234689", "1235679", "1245678" ],
              "34": [ "1234789", "1235689", "1245679", "1345678" ],
              "35": [ "1235789", "1245689", "1345679", "2345678" ],
              "36": [ "1236789", "1245789", "1345689", "2345679" ],
              "37": [ "1246789", "1345789", "2345689" ],
              "38": [ "1256789", "1346789", "2345789" ],
              "39": [ "1356789", "2346789" ],
              "40": [ "1456789", "2356789" ],
              "41": [ "2456789" ],
              "42": [ "3456789" ]
            },
            "8": {
              "36": [ "12345678" ],
              "37": [ "12345679" ],
              "38": [ "12345689" ],
              "39": [ "12345789" ],
              "40": [ "12346789" ],
              "41": [ "12356789" ],
              "42": [ "12456789" ],
              "43": [ "13456789" ],
              "44": [ "23456789" ]
            }
          },
          allCombos: [ {
            "3": ['12','3'],
            '4': ['13','4'],
            '5': ['14','23','5'],
            '6': ['15','24','6'],
            "7": ['16','25','34','7'],
            "8": ['18','26','35','8'],
            "9": ['18','27','36','45','126','135','234','9'],
            "10": ['19','28','37','46','127','136','145','235',"1234"],
            "11": ['29','38','47','56','128','137','146','1235'],
            "12": [],
            "13":[],
            "14":[],
            "15":[],
            "16":[],
            "17":[],
            "18":[],
            "19":[],
            "20":[],
            "21":[],
            "22":[],
            "23":[],
            "24":[],
            "25":[],
            "26":[],
            "27":[],
            "28":[],
            "29":[],
            "30":[],
            "31":[],
            "32":[],
            "33":[],
            "34":[],
            "35":[],
            "36":[],
            "37":[],
            "38":[],
            "39":[],
            "40":[],
            "41":[],
            "42":[],
            "43":[],
            "44":[],
            "45":[]


            }
          ]
        }
    });



    </script>
  </body>
</html>